import React, { useEffect, useLayoutEffect, useState } from 'react'
import styles from './SignIn.module.css'
import Input from '../../../../components/base/input/input'
import Button from '../../../../components/base/button/button'
import ValidMessage from '../../../../components/base/validation/ValidMessage'
import Link from 'next/link'
import Head from 'next/head'
import { motion } from 'framer-motion'
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import axios from 'axios'
import swal from 'sweetalert'
import { useRouter } from 'next/router'

const SignIn = () => {

    const router = useRouter()
    const [loginData, setLoginData] = useState({
        email: '',
        password: ''
    })
    const [isLoginError, setIsLoginError] = useState('')
    const [buttonDisable, setButtonDisable] = useState(false)
    const [formErrors, setFormErrors] = useState({})
    const [isSubmit, setIsSubmit] = useState(false)

    useEffect(() => {
        if (typeof window !== 'undefined') {
            const isAuth = localStorage.getItem('ChatopiaUser')
            if (isAuth) {
                swal({
                    title: "Warning!",
                    text: `Your account is Logged in!`,
                    icon: "error",
                });

                router.push('/')
            }
        }
    }, [])

    const handleInputLogin = (e) => {
        e.persist()
        setLoginData({ ...loginData, [e.target.name]: e.target.value })
    }

    const notify = () => {
        toast.success('Login Success!', {
            position: "top-right",
            autoClose: 3000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
        })
    }

    const handleLogin = async (e) => {
        e.preventDefault()
        setFormErrors(validate(loginData))
        setIsSubmit(true)
    }

    useEffect(() => {

        if (Object.keys(formErrors).length === 0 && isSubmit) {

            const sendLogin = async () => {
                try {

                    setButtonDisable(true)
                    const result = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/v1/users/login`, loginData)

                    const dataLocal = {
                        name: result.data.data.name,
                        id: result.data.data.id,
                        email: result.data.data.email,
                        photo: result.data.data.photo,
                        status: result.data.data.status,
                        token: result.data.data.token,
                        refreshToken: result.data.data.RefreshToken,
                    }

                    localStorage.setItem('ChatopiaUser', JSON.stringify(dataLocal))

                    setButtonDisable(false)
                    notify()
                    router.push('/')

                } catch (error) {
                    console.log(error)
                    setIsLoginError(error.response.data.message)
                    setButtonDisable(false)
                    return swal({
                        title: "Warning",
                        text: `${error.response.data.message}`,
                        icon: "warning"
                    });
                }
            }

            sendLogin()
        }
    }, [formErrors])

    const validate = (values) => {
        const errors = {}
        const regEx = /[a-zA-Z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,8}(.[a-z{2,8}])?/g;

        if (!values.email) {
            errors.email = 'email is required!'
        } else if (!regEx.test(values.email)) {
            errors.email = 'email is invalid!'
        }

        if (!values.password) {
            errors.password = 'password is required!'
        } else if ((values.password).length < 8) {
            errors.password = 'password must be more than 8 characters!'
        }

        return errors
    }

    return (
        <>
            <Head>
                <title>Chatopia | Sign In</title>
                <meta name="description" content="Generated by Chatopia" />
            </Head>
            <div className={`${styles.signin}`}>
                <motion.div
                    initial={{
                        scale: 0.5,
                        opacity: 0
                    }}
                    animate={{
                        scale: 1,
                        opacity: 1,
                        transition: {
                            delay: 0.2
                        }
                    }}
                    exit={{
                        width: 0,
                        transition: { duration: 100 }
                    }}
                >
                    <div className={`${styles.signin_container}`}>
                        <h1>Login</h1>
                        <h4>Hi, Welcome back!</h4>
                        <ValidMessage
                            text={isLoginError && `${isLoginError}`}
                            style={{
                                color: 'red',
                                margin: 0,
                                marginBottom: 15
                            }}
                        />
                        <form onSubmit={handleLogin} className={`${styles.forms}`}>
                            <Input
                                label={'Email'}
                                placeholder={'youremail@gmail.com'}
                                type={'text'}
                                name={'email'}
                                id={'email'}
                                onChange={handleInputLogin}
                                autofocus={true}
                            >
                                {formErrors.email &&
                                    <ValidMessage
                                        text={formErrors.email}
                                        style={{
                                            color: 'red',
                                            margin: 0
                                        }}
                                    />
                                }
                            </Input>
                            <Input
                                label={'Password'}
                                placeholder={'your password'}
                                type={'password'}
                                name={'password'}
                                id={'password'}
                                onChange={handleInputLogin}
                            >
                                {formErrors.password &&
                                    <ValidMessage
                                        text={formErrors.password}
                                        style={{
                                            color: 'red',
                                            margin: 0
                                        }}
                                    />
                                }
                            </Input>
                            <Link href='/auth/user/reset-password'>Forgot Password?</Link>
                            <Button
                                text={buttonDisable ? 'Loading...' : 'Login'}
                                type={'submit'}
                                style={buttonDisable ? { pointerEvents: 'none' } : {}}
                            />

                        </form>
                        <div className={`${styles.login_with}`}>
                            <span></span>
                            <p>Login with</p>
                            <span></span>
                        </div>
                        <Button
                            // text={'Login'}
                            className={`${styles.login_google}`}
                            style={buttonDisable ? { pointerEvents: 'none' } : {}}
                        >
                            <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M17.2825 7.356H8.95553V10.807H13.7475C13.3015 13 11.4345 14.26 8.95553 14.26C8.26186 14.2612 7.57479 14.1254 6.93371 13.8605C6.29263 13.5955 5.71016 13.2067 5.21971 12.7161C4.72926 12.2256 4.34048 11.643 4.07566 11.0019C3.81085 10.3608 3.67521 9.67367 3.67653 8.98C3.67534 8.28642 3.81108 7.59943 4.07595 6.95842C4.34083 6.3174 4.72963 5.73498 5.22006 5.24454C5.7105 4.75411 6.29292 4.3653 6.93394 4.10043C7.57495 3.83556 8.26194 3.69982 8.95553 3.701C10.2145 3.701 11.3525 4.14801 12.2455 4.879L14.8455 2.28C13.2615 0.899005 11.2305 0.0470046 8.95553 0.0470046C7.78133 0.0435724 6.61805 0.272314 5.53258 0.720074C4.4471 1.16783 3.46086 1.82578 2.63058 2.65606C1.8003 3.48634 1.14235 4.47258 0.694595 5.55805C0.246835 6.64353 0.0180933 7.80681 0.0215254 8.981C0.0179605 10.1552 0.246612 11.3186 0.694325 12.4041C1.14204 13.4896 1.79997 14.4759 2.63028 15.3062C3.46059 16.1366 4.44689 16.7945 5.53242 17.2422C6.61795 17.6899 7.7813 17.9186 8.95553 17.915C13.4225 17.915 17.4845 14.666 17.4845 8.981C17.4845 8.453 17.4035 7.884 17.2825 7.356Z" fill="#7E98DF" />
                            </svg>
                            Google
                        </Button>
                        <p
                            className={`${styles.to_signup}`}
                        >
                            Don't have an account? <Link href='/auth/user/signup'> Sign Up</Link>
                        </p>
                    </div>
                    <ToastContainer
                        position="top-right"
                        autoClose={5000}
                        hideProgressBar={false}
                        newestOnTop={false}
                        closeOnClick
                        rtl={false}
                        pauseOnFocusLoss
                        draggable
                        pauseOnHover
                    />
                </motion.div>
            </div>
        </>
    )
}

export default SignIn